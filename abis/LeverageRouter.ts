export const LeverageRouterAbi = [
  {
    inputs: [
      { internalType: "contract ILeverageManager", name: "_leverageManager", type: "address" },
      { internalType: "contract IMorpho", name: "_morpho", type: "address" },
      { internalType: "contract ISwapAdapter", name: "_swapper", type: "address" },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      { internalType: "uint256", name: "actualCost", type: "uint256" },
      { internalType: "uint256", name: "maxCost", type: "uint256" },
    ],
    name: "MaxSwapCostExceeded",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  { inputs: [], name: "Unauthorized", type: "error" },
  {
    inputs: [],
    name: "leverageManager",
    outputs: [{ internalType: "contract ILeverageManager", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "contract ILeverageToken", name: "token", type: "address" },
      { internalType: "uint256", name: "equityInCollateralAsset", type: "uint256" },
      { internalType: "uint256", name: "minShares", type: "uint256" },
      { internalType: "uint256", name: "maxSwapCostInCollateralAsset", type: "uint256" },
      {
        components: [
          { internalType: "address[]", name: "path", type: "address[]" },
          { internalType: "bytes", name: "encodedPath", type: "bytes" },
          { internalType: "uint24[]", name: "fees", type: "uint24[]" },
          { internalType: "int24[]", name: "tickSpacing", type: "int24[]" },
          { internalType: "enum ISwapAdapter.Exchange", name: "exchange", type: "uint8" },
          {
            components: [
              { internalType: "address", name: "aerodromeRouter", type: "address" },
              { internalType: "address", name: "aerodromePoolFactory", type: "address" },
              { internalType: "address", name: "aerodromeSlipstreamRouter", type: "address" },
              { internalType: "address", name: "uniswapSwapRouter02", type: "address" },
              { internalType: "address", name: "uniswapV2Router02", type: "address" },
            ],
            internalType: "struct ISwapAdapter.ExchangeAddresses",
            name: "exchangeAddresses",
            type: "tuple",
          },
          { internalType: "bytes", name: "additionalData", type: "bytes" },
        ],
        internalType: "struct ISwapAdapter.SwapContext",
        name: "swapContext",
        type: "tuple",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "morpho",
    outputs: [{ internalType: "contract IMorpho", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "loanAmount", type: "uint256" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "onMorphoFlashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "contract ILeverageToken", name: "token", type: "address" },
      { internalType: "uint256", name: "equityInCollateralAsset", type: "uint256" },
      { internalType: "uint256", name: "maxShares", type: "uint256" },
      { internalType: "uint256", name: "maxSwapCostInCollateralAsset", type: "uint256" },
      {
        components: [
          { internalType: "address[]", name: "path", type: "address[]" },
          { internalType: "bytes", name: "encodedPath", type: "bytes" },
          { internalType: "uint24[]", name: "fees", type: "uint24[]" },
          { internalType: "int24[]", name: "tickSpacing", type: "int24[]" },
          { internalType: "enum ISwapAdapter.Exchange", name: "exchange", type: "uint8" },
          {
            components: [
              { internalType: "address", name: "aerodromeRouter", type: "address" },
              { internalType: "address", name: "aerodromePoolFactory", type: "address" },
              { internalType: "address", name: "aerodromeSlipstreamRouter", type: "address" },
              { internalType: "address", name: "uniswapSwapRouter02", type: "address" },
              { internalType: "address", name: "uniswapV2Router02", type: "address" },
            ],
            internalType: "struct ISwapAdapter.ExchangeAddresses",
            name: "exchangeAddresses",
            type: "tuple",
          },
          { internalType: "bytes", name: "additionalData", type: "bytes" },
        ],
        internalType: "struct ISwapAdapter.SwapContext",
        name: "swapContext",
        type: "tuple",
      },
    ],
    name: "redeem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapper",
    outputs: [{ internalType: "contract ISwapAdapter", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
] as const;
